# console.log with text: value
snippet clg2
console.log('${1:text}', ${2:val})
endsnippet 

# log
snippet clg
console.log(${2:val})
endsnippet

# log info
snippet cli
console.info(${2:val})
endsnippet

# log warning
snippet clw
console.warn(${2:val})
endsnippet

# log error
snippet cle
console.error(${2:val})
endsnippet

snippet author
@author Jonas Cosandey (jonas.cosandey@adfinis-sygroup.ch)
endsnippet

# default import
snippet ji
import ${1:fields} from '${2:package}'
endsnippet

# named import
snippet jim
import {${1:fields}} from '${2:package}'
endsnippet

# arrow function
snippet af
(${1}) => ${2}
endsnippet

# function
snippet f "function"
function ${1}(${2}) {
	${3}
}
endsnippet

# property function
snippet pf
${1}(${2}) {
	${3}
}
endsnippet

# ember

# this.set
snippet ts
this.set('${1:text}', ${2:val})
endsnippet

# this.setProperties
snippet tsp
this.setProperties({${1:text}: ${2:val}})
endsnippet

# this.get
snippet tg
this.get('${1:text}')
endsnippet

# object.set
snippet os
${1:obj}.set('${2:text}', ${3:val})
endsnippet

# object.setProperties
snippet osp
${1:obj}.setProperties({${2:text}: ${3:val}})
endsnippet

# object.get
snippet og
${1:obj}.get('${3:text}')
endsnippet

# ember call super
snippet super
this._super(...arguments)
endsnippet

# model attribute of type string
snippet mas
${1:var}: attr('string'),
endsnippet

# model attribute of type number
snippet man
${1:var}: attr('number'),
endsnippet

# model attribute of type boolean
snippet mab
${1:var}: attr('boolean'),
endsnippet

# model attribute
snippet mae
${1:var}: attr(),
endsnippet

# model attribute
snippet ma
${1:var}: ${2:method}('${3:type}'),
endsnippet

# test helper with await
snippet th
await ${1:stmt}('${2:selector}')
endsnippet

# factory attribute
snippet fa
${1:attr}: () => faker.${2},
endsnippet

# assert dom
snippet ad
assert.dom('${1:selector}').${2}(${3})
endsnippet

# ember testing
snippet tpt
await pauseTest()
endsnippet

# try with sentry
snippet sentry
try	{
	${1://code}
} catch (e) {
  captureException(e);
  this.notify.error(this.intl.t("global.error"));
	${2://handling}
}
endsnippet

#model import
snippet dsmodel
import Model from "ember-data/model";
import attr from "ember-data/attr";
import { ${1:belongsTo}, ${2:hasMany} } from "ember-data/relationships";

export default Model.extend({
${3}
endsnippet

#ember controller
snippet econtroller "Ember Controller ha"
import Controller from "@ember/controller";
${2:import ${3:mixin} from "${4:@path}";}

export default Controller.extend($3 ${5:,}{
	${6}
})
endsnippet

#ember component
snippet ecomponent "Ember Component"
import Component from "@ember/component"

export default Component.extend({
	${1}
})
endsnippet

snippet	imoment "Import moment"
import moment from 'moment';
endsnippet

snippet	icomputed "Import computed -> @ember/object"
import {computed} from '@ember/object';
endsnippet

snippet	ialias "Import alias -> @ember/object/computed"
import {alias} from '@ember/object/computed';
endsnippet

snippet	itask "Import task -> ember-concurrency"
import {task} from 'ember-concurrency';
endsnippet

snippet	iservice "Import inject -> @ember/service"
import {inject as service} from '@ember/service';
endsnippet

snippet init "init -> super"
init() {
	this._super(...arguments)
	${1}
}
endsnippet

snippet isentry "Import * -> @sentry/browser"
import * as Sentry from "@sentry/browser";
endsnippet

snippet icapture "Import captureException -> @sentry/browser"
import {captureException} from "@sentry/browser";
endsnippet

snippet eroute "Ember Route"
import Route from "@ember/routing/route";

export default Route.extend({
	${1}
})
endsnippet

snippet	try
try {
	${1}
} catch (${2:e}) {
	${3}
}
endsnippet

snippet task "concurrency task"
${1:property}: task(function*(${2}) {
	${3}
}),
endsnippet

snippet cp "computed property"
${1:property}: computed(${2}, function() {
	${3}
}),
endsnippet

priority -50

#From https://github.com/honza/vim-snippets/blob/master/UltiSnips/javascript.snippets
############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


snippet : "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet if "if (condition) { ... }"
if(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if(${1:true}) {
	${VISUAL}$0
}else{
	${2}
}
endsnippet

snippet switch
switch(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case'${VISUAL}${1:case}':
	${VISUAL}$0
	break
endsnippet

snippet do "do { ... } while (condition)"
do{
	${VISUAL}$0
}while(${1:/* condition */})
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0
endsnippet

snippet us
'use strict'
endsnippet

# vim:ft=snippets:
