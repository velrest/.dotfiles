call plug#begin('~/.vim/plugged')


" predefiend snippets for languages: check for specific functionality
Plug 'honza/vim-snippets'
" snippet engine : CURENTLY NOT WORKING WITH DEOPLETE FIX
Plug 'SirVer/ultisnips'
" file broser
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
" fuzzy finder for files
Plug 'ctrlpvim/ctrlp.vim'
" editorconfig 
Plug 'editorconfig/editorconfig-vim'
" toggle code commenting
Plug 'scrooloose/nerdcommenter'
" Status bar with infos
Plug 'itchyny/lightline.vim'
" fuzzy finder for file content
Plug 'mileszs/ack.vim'
" vim prettier integration
Plug 'prettier/vim-prettier', {
    \ 'do': 'yarn install',
    \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss'] }
" syntax highlighting for hbs
Plug 'mustache/vim-mustache-handlebars'
" theme
Plug 'arcticicestudio/nord-vim'
" icons for nerdtree
Plug 'ryanoasis/vim-devicons'
" completion
Plug 'Shougo/deoplete.nvim'
" dependecy of deoplete	
Plug 'roxma/nvim-yarp'
" dependecy of deoplete	
Plug 'roxma/vim-hug-neovim-rpc'
" Linting engine
Plug 'w0rp/ale'
" lightline integration for ale
Plug 'maximbaz/lightline-ale'

" show git changes in vim
Plug 'airblade/vim-gitgutter'
"Indent Guides
Plug 'nathanaelkane/vim-indent-guides'
" To display gitbranch in lightline
Plug 'itchyny/vim-gitbranch'
" toggle booleans
Plug 'sagarrakshe/toggle-bool'
" git integration
Plug 'tpope/vim-fugitive'

call plug#end()            " required
"__________________________________________________________________________________________________


" Nerd Font -------------------------------------
set guifont=Roboto\ Mono\ Thin\ Italic\ Nerd\ Font\ Complete\ 11
" _______________________________________________


" Vim -------------------------------------------

set encoding=utf-8

"Shame on me
set mouse=a
autocmd FileType py highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType py match OverLength /\%81v.\+/

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

filetype plugin on
set omnifunc=syntaxcomplete#Complete
syntax on
set number
set nowrap

set tabstop=4
set softtabstop=4
set shiftwidth=4

syntax enable
set background=dark
set termguicolors " if you want to run vim in a terminal
colorscheme nord

set ignorecase

set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Custom Keys
let mapleader=";"
map <leader>f :NERDTreeFind<cr>
map <leader>t :NERDTreeToggle<cr>
map <leader>tb :ToggleBool<cr>
map <leader>so :so %<cr>
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//gc<left><left><left>

noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-C>:update<CR>

noremap <silent> <C-Q>          :quit<CR>
vnoremap <silent> <C-Q>         <C-C>:quit<CR>
inoremap <silent> <C-Q>         <C-C>:quit<CR>

"ALE
noremap <silent> <leader>lf :ALEFirst<cr>
noremap <silent> <leader>ln :ALENext<cr>
noremap <silent> <leader>lp :ALEPrevious<cr>
noremap <silent> <leader>ll :ALELast<cr>
"ACK
noremap <Leader>a :Ack!<Space>
xnoremap <Leader>a sy:Ack! <C-r>=fnameescape(@s)<CR><CR>
" _______________________________________________


 "deoplete --------------------------------------
set pyxversion=3
let g:deoplete#enable_at_startup = 1
call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
" _______________________________________________

" NERDTree -------------------------------------
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1
" _______________________________________________


" ctrlp --------------------------------------
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" _______________________________________________


" Snippets --------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnips']
" _______________________________________________


" vim gutter ------------------------------------
set updatetime=100
" _______________________________________________


" editorconf ------------------------------------
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" _______________________________________________


" Lightline -------------------------------------
let g:lightline = {
			\ 'colorscheme': 'nord'
			\ }

let g:lightline.component_expand = {
	  \  'linter_checking': 'lightline#ale#checking',
	  \  'linter_warnings': 'lightline#ale#warnings',
	  \  'linter_errors': 'lightline#ale#errors',
	  \  'linter_ok': 'lightline#ale#ok',
	  \  'prettier_deactivated': 'PrettierStatus'
	  \ }

let g:lightline.component_type = {
	  \     'linter_checking': 'left',
	  \     'linter_warnings': 'warning',
	  \     'linter_errors': 'error',
	  \     'linter_ok': 'left',
	  \     'prettier_deactivated': 'warning',
	  \ }

let g:lightline.active = {
			\ 'right': [
			\	[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
			\	[ 'lineinfo' ],
			\	[ 'percent' ],
			\	[ 'charvaluehex', 'fileformat', 'fileencoding', 'filetype' ],
			\	[ 'prettier_deactivated' ],
			\ ],
			\ 'left': [
			\	[ 'mode', 'paste' ],
			\	[ 'gitbranch', 'readonly', 'filename', 'modified' ]
			\ ]
			\ }

let g:lightline.component_function = { 
			\	'gitbranch': 'gitbranch#name',
			\ }

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
set laststatus=2
" _______________________________________________


" ack vim ---------------------------------------
" Use the silver searcher if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

 ":Ack normally jumps to the first file found, while :Ack! does not.
 "Therefore, swap them around
cnoreabbrev Ack Ack!
cnoreabbrev AckFromSearch AckFromSearch!
" _______________________________________________


" Prettier --------------------------------------
" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0

"use prettier default settings since vim-prettier is pre configured for
"facebook
let g:prettier#autoformat = 0
let g:prettier#config#single_quote = 'false'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#parser = 'babylon'

let g:prettier_enabled = 1

function! PrettierStatus()
	return g:prettier_enabled? "" : "\uf071  Prettier disabled! Reenable with `call TogglePrettier()`."
endfunction

function! ExecutePrettier()
	if g:prettier_enabled
		PrettierAsync
	endif
endfunction

function! TogglePrettier()
	let g:prettier_enabled = g:prettier_enabled? 0 : 1
	echo "Prettier enabled: ".g:prettier_enabled
	call lightline#update()
endfunction

"nnoremap <Leader>tp> call TogglePrettier()

autocmd BufWritePre *.js,*.css,*.scss,*.less,*.yaml call ExecutePrettier()
" _______________________________________________

" Indent Guides ---------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#343945 ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2C313C ctermbg=4
" _________________________________________________

" YAML --------------------------------------------
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
" _________________________________________________
"
" NERDTress File highlighting ---------------------
function! NERDTreeHighlightFile(extension, fg, guifg)
 exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg=none ctermfg='. a:fg .' guibg=#2E3440 guifg='. a:guifg
 exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'green')
call NERDTreeHighlightFile('ini', 'yellow', 'yellow')
call NERDTreeHighlightFile('md', 'blue', '#3366FF')
call NERDTreeHighlightFile('yml', 'yellow', 'yellow')
call NERDTreeHighlightFile('config', 'yellow', 'yellow')
call NERDTreeHighlightFile('conf', 'yellow', 'yellow')
call NERDTreeHighlightFile('json', 'yellow', 'yellow')
call NERDTreeHighlightFile('html', 'yellow', 'yellow')
call NERDTreeHighlightFile('styl', 'cyan', 'cyan')
call NERDTreeHighlightFile('css', 'cyan', 'cyan')
call NERDTreeHighlightFile('coffee', 'Red', 'red')
call NERDTreeHighlightFile('js', 'Red', '#ffa500')
call NERDTreeHighlightFile('php', 'Magenta', '#ff00ff')
call NERDTreeHighlightFile('ds_store', 'Gray', '#686868')
call NERDTreeHighlightFile('gitconfig', 'Gray', '#686868')
call NERDTreeHighlightFile('gitignore', 'Gray', '#686868')
call NERDTreeHighlightFile('bashrc', 'Gray', '#686868')
call NERDTreeHighlightFile('bashprofile', 'Gray', '#686868')

if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
