" [vim-plug-cs]
call plug#begin('~/.vim/plugged')

" snippet engine 
Plug 'SirVer/ultisnips'
" fuzzy finder for files
Plug 'ctrlpvim/ctrlp.vim'
" editorconfig 
Plug 'editorconfig/editorconfig-vim'
" toggle code commenting
Plug 'scrooloose/nerdcommenter'
" Status bar with infos
Plug 'itchyny/lightline.vim'
" fuzzy finder for file content
Plug 'mileszs/ack.vim'
" syntax highlighting for hbs
Plug 'mustache/vim-mustache-handlebars'
" theme
Plug 'arcticicestudio/nord-vim'
" completion
Plug 'Shougo/deoplete.nvim'
" dependecy of deoplete	
Plug 'roxma/nvim-yarp'
" dependecy of deoplete	
Plug 'roxma/vim-hug-neovim-rpc'
" Linting engine
Plug 'w0rp/ale'
" lightline integration for ale
Plug 'maximbaz/lightline-ale'
"Indent Guides
Plug 'nathanaelkane/vim-indent-guides'
" To display gitbranch in lightline
Plug 'itchyny/vim-gitbranch'
" git integration
Plug 'tpope/vim-fugitive'
Plug 'ambv/black', { 'for': 'python' }

" EXPERIMENTAL are still beeing battle tested
Plug 'tpope/vim-vinegar'
Plug 'aserebryakov/vim-todo-lists'
Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-eunuch'
Plug 'mhinz/vim-signify'
Plug 'ap/vim-css-color'

call plug#end() " required
" [vim-plug-ce]

" Vim [vim-cs]
set encoding=utf-8
highlight Cursor guifg=white guibg=#808080

"Shame on me
set mouse=a
autocmd FileType py highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType py match OverLength /\%81v.\+/

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

filetype plugin on
set omnifunc=syntaxcomplete#Complete
syntax on
set number
set nowrap

syntax enable
set background=dark
set termguicolors " if you want to run vim in a terminal
colorscheme nord

set ignorecase

set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Custom Keys
let mapleader=";"
map       <leader>f             :NERDTreeFind<cr>
map       <leader>t             :NERDTreeToggle<cr>
map       <leader>so            :so %<cr>
nnoremap  <Leader>s             :%s/\<<C-r><C-w>\>//gc<left><left><left>
vnoremap  <Leader>s             :s//gc<left><left><left>
nnoremap  <Leader>gc            :!git ci<CR>

noremap   <silent> <C-S>        :update<CR>
vnoremap  <silent> <C-S>        <C-C>:update<CR>
inoremap  <silent> <C-S>        <C-C>:update<CR>

noremap   <silent> <C-Q>        :quit<CR>
vnoremap  <silent> <C-Q>        <C-C>:quit<CR>
inoremap  <silent> <C-Q>        <C-C>:quit<CR>

" Surround vim replacement
vnoremap  <leader>(             <ESC>`>a)<ESC>`<i(<ESC>
vnoremap  <leader>{             <ESC>`>a}<ESC>`<i{<ESC>
vnoremap  <leader>[             <ESC>`>a]<ESC>`<i[<ESC>
vnoremap  <leader>'             <ESC>`>a'<ESC>`<i'<ESC>
vnoremap  <leader>"             <ESC>`>a"<ESC>`<i"<ESC>

"ACK
noremap   <Leader>a             :Ack!<Space>
xnoremap  <Leader>a             sy:Ack! <C-r>=fnameescape(@s)<CR><CR>

" ALE
noremap   <silent> <leader>lf   :ALEFirst<cr>
noremap   <silent> <leader>ln   :ALENext<cr>
noremap   <silent> <leader>lp   :ALEPrevious<cr>
noremap   <silent> <leader>ll   :ALELast<cr>

" fugitive
noremap   <silent> <leader>fp   :Gdiff<cr>

" [vim-ce]

" ALE [ale-cs]
" This is needed as long as
" https://github.com/ember-template-lint/ember-template-lint/pull/659 is not
" merged or in other ways fixed.
let g:ale_handlebars_embertemplatelint_use_global=1
let g:ale_handlebars_embertemplatelint_executable="/home/jonas/.yarn/bin/ember-template-lint"

let g:ale_fix_on_save = 1
" [ale-ce]

"deoplete [deoplete-cs]
set pyxversion=3
let g:deoplete#enable_at_startup = 1
call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
"[deoplete-ce]

" ctrlp [ctrlp-cs]
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" [ctrlp-ce]


" Snippets [ultisnips-cs]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnips']
" [ultisnips-ce]


" vim gutter [vim-gitgutter-cs]
set updatetime=100
" [vim-gitgutter-ce]


" editorconf [editorconf-vim-cs]
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" [editorconf-vim-ce]


" Lightline [lightline-cs]
let g:lightline = {
			\ 'colorscheme': 'nord'
			\ }

let g:lightline.component_expand = {
	  \  'linter_checking': 'lightline#ale#checking',
	  \  'linter_warnings': 'lightline#ale#warnings',
	  \  'linter_errors': 'lightline#ale#errors',
	  \  'linter_ok': 'lightline#ale#ok',
	  \ }

let g:lightline.component_type = {
	  \     'linter_checking': 'left',
	  \     'linter_warnings': 'warning',
	  \     'linter_errors': 'error',
	  \     'linter_ok': 'left',
	  \ }

let g:lightline.active = {
			\ 'right': [
			\	[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
			\	[ 'lineinfo' ],
			\	[ 'percent' ],
			\	[ 'charvaluehex', 'fileformat', 'fileencoding', 'filetype' ],
			\ ],
			\ 'left': [
			\	[ 'mode', 'paste' ],
			\	[ 'gitbranch', 'readonly', 'filename', 'modified' ]
			\ ]
			\ }

let g:lightline.component_function = { 
			\	'gitbranch': 'gitbranch#name',
			\ }

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
set laststatus=2
" [lightline-ce]


" ack vim [ack-cs]
" Use the silver searcher if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

 ":Ack normally jumps to the first file found, while :Ack! does not.
 "Therefore, swap them around
cnoreabbrev Ack Ack!
cnoreabbrev AckFromSearch AckFromSearch!
" [ack-ce]

" [black-cs] python formatting
autocmd BufWritePre *.py execute ':Black'
" [black-ce]

" Indent Guides [vim-indent-guides-cs]
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#343945 ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2C313C ctermbg=4
" [vim-indent-guides-ce]

" [vim-todo-list-cs]
let g:VimTodoListsDatesEnabled = 1
" [vim-todo-list-ce]

" [vim-signify-cs]
let g:signify_vcs_list = [ 'git' ]
" [vim-signify-ce]
