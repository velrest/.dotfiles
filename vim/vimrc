call plug#begin('~/.vim/plugged')

Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
"Plug 'mtscout6/syntastic-local-eslint.vim'
"Plug 'flazz/vim-colorschemes'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'ctrlpvim/ctrlp.vim'
"Plug 'tpope/vim-fugitive'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-syntastic/syntastic'
Plug 'itchyny/lightline.vim'
"Plug 'davidhalter/jedi-vim'
Plug 'ervandew/supertab'
Plug 'jdkanani/vim-material-theme'
"Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'mileszs/ack.vim'
Plug 'nathanaelkane/vim-indent-guides'
"Plug 'sbdchd/neoformat'
Plug 'prettier/vim-prettier', {
    \ 'do': 'yarn install',
    \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss'] }
Plug 'mustache/vim-mustache-handlebars'


call plug#end()            " required
"
" NERDTree ______________________________________
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Vim ___________________________________________

"Shame on me
set mouse=a

" Custom Keys -----------------------------------
let mapleader="รถ"
map <leader>f :NERDTreeFind<cr>
map <leader>t :NERDTreeToggle<cr>
vnoremap // y/<C-R>"<CR>
" -----------------------------------------------

" Snippets --------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnips']
"------------------------------------------------

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

filetype plugin on
syntax on
set number
set nowrap

set tabstop=4
set softtabstop=4
set shiftwidth=4

syntax enable
set background=dark
set termguicolors " if you want to run vim in a terminal
colorscheme material-theme

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

autocmd FileType py highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType py match OverLength /\%81v.\+/

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

set clipboard=unnamedplus

" Lightline ______________________________________
let g:lightline = {
      \ 'colorscheme': 'breezy',
      \ }

" Syntastic _____________________________________
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8']

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Jedi
"let g:jedi#use_tabs_not_buffers = 1

" vim-markdown-preview
"let vim_markdown_preview_github=1
"let vim_markdown_preview_toggle=0
"let vim_markdown_preview_hotkey='<C-m>'
"let vim_markdown_preview_temp_file=0

" ack vim
" Use the silver searcher if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

 ":Ack normally jumps to the first file found, while :Ack! does not.
 "Therefore, swap them around
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

cnoreabbrev AckFromSearch AckFromSearch!
xnoremap <Leader>a sy:Ack! <C-r>=fnameescape(@s)<CR><CR>


" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#2A363E
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#37474F


" Prettier
" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0

let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.css,*.scss,*.less PrettierAsync
