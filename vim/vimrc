call plug#begin('~/.vim/plugged')


" predefiend snippets for languages: check for specific functionality
Plug 'honza/vim-snippets'
" snippet engine : CURENTLY NOT WORKING WITH DEOPLETE FIX
Plug 'SirVer/ultisnips'
" file broser
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
" fuzzy finder for files
Plug 'ctrlpvim/ctrlp.vim'
" editorconfig 
Plug 'editorconfig/editorconfig-vim'
" toggle code commenting
Plug 'scrooloose/nerdcommenter'
" Status bar with infos
Plug 'itchyny/lightline.vim'
" fuzzy finder for file content
Plug 'mileszs/ack.vim'
" vim prettier integration
Plug 'prettier/vim-prettier', {
    \ 'do': 'yarn install',
    \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss'] }
" syntax highlighting for hbs
Plug 'mustache/vim-mustache-handlebars'
" theme
Plug 'arcticicestudio/nord-vim'
" icons colors for nerdtree PEROFRMANCE ISSUES
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" icons for nerdtree
Plug 'ryanoasis/vim-devicons'
" completion
Plug 'Shougo/deoplete.nvim'
" dependecy of deoplete	
Plug 'roxma/nvim-yarp'
" dependecy of deoplete	
Plug 'roxma/vim-hug-neovim-rpc'
" lanugage client
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" Linting engine
Plug 'w0rp/ale'
" lightline integration for ale
Plug 'maximbaz/lightline-ale'

" show git changes in vim
Plug 'airblade/vim-gitgutter'

call plug#end()            " required
"__________________________________________________________________________________________________


" Nerd Font -------------------------------------
set guifont=Roboto\ Mono\ Thin\ Italic\ Nerd\ Font\ Complete\ 11
" _______________________________________________


" Vim -------------------------------------------

set encoding=utf-8

"Shame on me
set mouse=a
autocmd FileType py highlight OverLength ctermbg=red ctermfg=white guibg=#592929
autocmd FileType py match OverLength /\%81v.\+/

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

filetype plugin on
syntax on
set number
set nowrap

set tabstop=4
set softtabstop=4
set shiftwidth=4

syntax enable
set background=dark
set termguicolors " if you want to run vim in a terminal
colorscheme nord

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Custom Keys
let mapleader="รถ"
map <leader>f :NERDTreeFind<cr>
map <leader>t :NERDTreeToggle<cr>
vnoremap // y/<C-R>"<CR>
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/

noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-C>:update<CR>

noremap <silent> <C-Q>          :quit<CR>
vnoremap <silent> <C-Q>         <C-C>:quit<CR>
inoremap <silent> <C-Q>         <C-C>:quit<CR>

noremap <silent> <C-A-S>          :wa<CR>
vnoremap <silent> <C-A-S>         <C-C>:wa<CR>
inoremap <silent> <C-A-S>         <C-C>:wa<CR>

" Not as usefull as thougth
"set clipboard=unnamedplus
" _______________________________________________


" deoplete --------------------------------------
set pyxversion=3
let g:deoplete#enable_at_startup = 1
call deoplete#custom#source('ultisnips', 'matchers', ['matcher_fuzzy'])
" _______________________________________________


"language-client -------------------------------
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ }

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
" _______________________________________________


" NERDTree -------------------------------------
let g:NERDTreeSyntaxDisableDefaultExtensions = 1
let g:NERDTreeDisableExactMatchHighlight = 1
let g:NERDTreeDisablePatternMatchHighlight = 1
let g:NERDTreeSyntaxEnabledExtensions = ['html', 'hbs', 'json', 'js', 'css', 'license', 'yml', 'md', 'conf', 'sh', 'sql', 'vim']

let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1
" _______________________________________________


" ctrlp --------------------------------------
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" _______________________________________________


" Snippets --------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnips']
" _______________________________________________


" vim gutter ------------------------------------
set updatetime=100
" _______________________________________________


" editorconf ------------------------------------
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" _______________________________________________


" Lightline -------------------------------------
let g:lightline = {
			\ 'colorscheme': 'nord'
			\ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }

let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" _______________________________________________


" ack vim ---------------------------------------
" Use the silver searcher if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

 ":Ack normally jumps to the first file found, while :Ack! does not.
 "Therefore, swap them around
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

cnoreabbrev AckFromSearch AckFromSearch!
xnoremap <Leader>a sy:Ack! <C-r>=fnameescape(@s)<CR><CR>
" _______________________________________________


" Prettier --------------------------------------
" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0

"use prettier default settings since vim-prettier is pre configured for
"facebook
let g:prettier#autoformat = 0
let g:prettier#config#single_quote = 'false'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#parser = 'babylon'

autocmd BufWritePre *.js,*.css,*.scss,*.less PrettierAsync
" _______________________________________________
